#! /usr/bin/python
import sys

# heaps here are 1 based, so read puts None in 0th element
def readNums(filename):
	fileStream = open(filename) 
  	lst = [None]
  	for line in fileStream:
		l = line.strip().split(" ")
	  	for s in l:
			lst.append(int(s))
   	return lst

# heaps here are 1 based
def parent(i): return i/2
def left(i): return 2*i
def right(i): return 2*i+1

# so for their length element 0 does not count
def hLen(A): return len(A)-1

def swap(A, i, n):
	temp = A[i]
	A[i] = A[n]
	A[n] = temp

def heapify(A, i, n): 
	"""
  	Build a Min Heap at i
  	n is the number of elements in the heap
  	A[i] is "almost a heap" (except root i), 
  	Make A[i] a heap 
  	"""
	if ( i > n ):
		return;
	minIndex = i
	lChildIndex = left(i)
	rChildIndex = right(i)

	#need to find MIN and stick it at the top!
	if ( lChildIndex <= n and A[lChildIndex] < A[i] ):
		minIndex = lChildIndex
	else:
		minIndex = i
	if ( rChildIndex <= n and A[rChildIndex] < A[minIndex] ):
		minIndex = rChildIndex
	if minIndex != i:
		if minIndex == lChildIndex:
			#print "Swapping Root Index: " + str(i) + " With Left Child Index: " + str(left(i))
			swap( A, i, left(i))
		if minIndex == rChildIndex:
			#print "Swapping Root Index: " + str(i) + " With Right Child Index: " + str(right(i))
			swap(A, i, right(i))

	heapify( A, left(i), n )
	heapify( A, right(i), n )

def buildHeap(A): 
	# build a Min heap A from an unsorted array
	heapify(A, 1, hLen(A))

def heapExtractMin(A):
	minVal = A[1]
	A.pop(1)
	buildHeap(A)
	return minVal,A

def heapInsert(A,v):
	B = [None, v]
	A.pop(0) # get rid of previous none
	B.extend(A)
	buildHeap(B)
  	return B

if __name__ == "__main__":
	db = len(sys.argv)>2
   	A  = readNums(sys.argv[1])
   	if db: print "Input:", A[1:]
   	buildHeap(A)
   	min,A = heapExtractMin(A)
   	print "min", min
   	A=heapInsert(A,0)
   	min,A = heapExtractMin(A)
   	print "min", min
   	min,A = heapExtractMin(A)
   	print "min", min
