#! /usr/bin/python
import sys

# heaps here are 1 based, so read puts None in 0th element
def readNums(filename):
	fileStream = open(filename) 
  	lst = [None]
  	for line in fileStream:
		l = line.strip().split(" ")
	  	for s in l:
			lst.append(int(s))
   	return lst

# heaps here are 1 based
def parent(i): return i/2
def left(i): return 2*i
def right(i): return 2*i+1

# so for their length element 0 does not count
def hLen(A): return len(A)-1

def swap(A, i, n):
	temp = A[i]
	A[i] = A[n]
	A[n] = temp

def heapify(A, i, n): 
	"""
  	Build a Min Heap at i
  	n is the number of elements in the heap
  	A[i] is "almost a heap" (except root i), 
  	Make A[i] a heap 
  	"""
	L = left(i)
	R = right(i)
	if ( L<=n and A[L]>A[i] ):
		max = L
	else:
		max = i
	if ( R <= n and A[R] > A[max] ):
		max = R
	if max != i:
		if max == L:
			print "Swapping: " + str(left(i)) + " With: " + str(i)
			swap( A, i, left(i))
			heapify( A, left(i), n)
			print A
		if max == R:
			print "Swapping: " + str(right(i)) + " With: " + str(i)
			swap(A, i, right(i))
			heapify(A, right(i) ,n)
			print A

def buildHeap(A): 
	# build a Min heap A from an unsorted array
	n = hLen(A);
	for i in range( int(n/2), 1, -1 ):
		heapify(A,i,n)

def heapExtractMin(A):
	minVal = A[1]
	A.pop(1)
	return minVal,A

def heapInsert(A,v):
	B = [v]
	B.extend(A)
  	return A

if __name__ == "__main__":
	db = len(sys.argv)>2
   	A  = readNums(sys.argv[1])
   	if db: print "Input:", A[1:]
	print A
   	buildHeap(A)
   	min,A = heapExtractMin(A)
   	print "min", min
   	A=heapInsert(A,0)
   	min,A = heapExtractMin(A)
   	print "min", min
   	min,A = heapExtractMin(A)
   	print "min", min
